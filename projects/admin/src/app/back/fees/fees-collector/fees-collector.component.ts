import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { TournamentService } from '../../../common/services/tournament.service';
import { FeesCollectorService } from './fees-collector.service';
import { BehaviorSubject, from, Observable, of, switchMap } from 'rxjs';
import { club_tournament_extended, FEE_RATE, Game, Gamer } from '../fees.interface';
import { PdfService } from '../../../common/services/pdf.service';
import { HorizontalAlignment, PDF_table } from '../../../common/interfaces/pdf-table.interface';
import { FFBplayer } from '../../../common/ffb/interface/FFBplayer.interface';
import { InputPlayerComponent } from '../../../common/ffb/input-licensee/input-player.component';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { GetConfirmationComponent } from '../../modals/get-confirmation/get-confirmation.component';
import { ToastService } from '../../../common/services/toast.service';



@Component({
  selector: 'app-fees-collector',
  imports: [CommonModule, ReactiveFormsModule, FormsModule, InputPlayerComponent],
  templateUrl: './fees-collector.component.html',
  styleUrl: './fees-collector.component.scss'
})
export class FeesCollectorComponent {
  next_tournaments: club_tournament_extended[] = [];
  selected_tournament: club_tournament_extended | null = null;
  fee_rates = Object.values(FEE_RATE);
  selected_fee_rate: FEE_RATE = FEE_RATE.STANDARD;
  // Replace signal with classic state + BehaviorSubject trigger
  days_back: number = 0;
  private daysBack$ = new BehaviorSubject<number>(0);
  game!: Game;
  already_charged: boolean = false;
  pdfLoading = false;
  new_player!: FFBplayer | null;



  constructor(
    private tournamentService: TournamentService,
    private feesCollectorService: FeesCollectorService,
    private pdfService: PdfService,
    private modalService: NgbModal,
    private toastService: ToastService,

  ) {

    this.daysBack$.pipe(
      switchMap(v => this.tournamentService.list_next_tournaments(v))
    ).subscribe(async (tournaments) => {
      const withStatus: club_tournament_extended[] = tournaments.map(t => ({ ...t }));
      const statuses = await Promise.all(withStatus.map(t => this.feesCollectorService.check_tournament_status(t)));
      withStatus.forEach((t, i) => (t.status = statuses[i]));
      this.next_tournaments = withStatus;
    });

  }

  ngOnInit() {

    this.selected_tournament = this.feesCollectorService.get_tournament();  // persisté par le cache service
    if (this.selected_tournament) {
      // this.selected_tournament.status = await this.feesCollectorService.check_tournament_status(this.selected_tournament);
      console.log('ngOnInit checking status for selected tournament:', this.selected_tournament);
    } else {
      console.log('ngOnInit no selected tournament');
    }

    this.feesCollectorService.game$.subscribe((game) => {
      if (this.selected_tournament) {   // true new game$ generated by selection of tournament
        this.game = game;
        console.log('Game updated from service for tournament ', this.game);
      }
    });
  }


  set_tournament(tournament: club_tournament_extended ) {
    this.selected_tournament = tournament;
    this.feesCollectorService.set_tournament(tournament);
    if(tournament.status === 'entamé') {
      this.toastService.showInfo('Gestion tournoi', 'Ce tournoi a partiellement été pointé; vous pouvez en restaurer le dernier état.');
    }
  }


  fee_rate_changed(fee_rate: FEE_RATE) {
    this.feesCollectorService.change_fee_rate(fee_rate);
    this.log_game_state();
  }

  one_week_back() {
    this.days_back += 7;
    this.daysBack$.next(this.days_back);
  }

  euros_collected(): number {
    return this.feesCollectorService.euros_collected();
  }
  stamps_collected(): number {
    return this.feesCollectorService.stamps_collected();
  }


  clear_added_player() {
    this.new_player = null; // or this.new_player = undefined;
  }

  check_status() {
    if (this.selected_tournament && this.selected_tournament.status !== 'terminé' && this.all_gamers_validated()) {
      const modalRef = this.modalService.open(GetConfirmationComponent, { centered: true });
      modalRef.componentInstance.title = `Vous avez pointé tous les joueurs `;
      modalRef.componentInstance.subtitle = `Vous allez maintenant valider tampons et droits de table`;
      modalRef.result.then((answer: boolean) => {
        if (answer) {
          this.validate_fees();
          this.next_tournaments.map(t => {
            if (t.id === this.selected_tournament?.id) {
              t.status = 'terminé';
            }
          });
        }
      });
    }

  }

  clear_session() {
    this.game = null!;
    this.selected_tournament = null!;
    this.feesCollectorService.clear_tournament();
  }

  toggle_sort() {
    this.feesCollectorService.toggle_sort();
  }

  toggle_fee() {
    this.feesCollectorService.toggle_fee();
    this.log_game_state();

  }

  async validate_fees() {
    this.tables_to_pdf();
    await this.feesCollectorService.save_fees()
    this.clear_session();
  }

  add_player(player: FFBplayer | null) {
    if (player) {
      this.feesCollectorService.add_player(player);
      this.log_game_state();
    }
  }

  all_gamers_validated(): boolean {
    return !!this.game.tournament && !!this.game && this.game.gamers.every(gamer => (gamer.validated || !gamer.enabled));
  }

  gamer_solvent(gamer: Gamer): boolean {
    return !gamer.is_member || gamer.in_euro || (gamer.game_credits >= (this.game.fees_doubled ? 2 : 1));
  }

  gamer_class(gamer: Gamer): string {
    let card_class = 'card h-100';
    if (!gamer.enabled) {
      card_class += 'bg-success shadow-lg text-bg-success NP';
      return card_class;
    }

    if (gamer.validated) {
      card_class += ' bg-success shadow-lg text-bg-success';
    } else {
      if (gamer.is_member)
        card_class += ' border-primary';
      else {
        card_class += ' border-secondary';
      }
    }
    return card_class
  }

  async log_game_state() {
    if (this.selected_tournament && this.selected_tournament.status === 'terminé') return;
    return this.feesCollectorService.log_game_state();
  }

  async restore_trace() {
    const restored = await this.feesCollectorService.restore_game_state();
  }

  // PDF generation 


  sales_of_the_day_table: PDF_table = {
    title: '',
    headers: [],
    alignments: [],
    rows: []
  };

  printTable() {
    this.pdfLoading = true;
    setTimeout(() => {
      this.tables_to_pdf();
      this.pdfLoading = false;
    }, 100);
  }

  tables_to_pdf() {

    const gamers_table = this.build_gamers_table();

    let fname = this.game.tournament
      ? `${this.game.tournament.date}_${this.game.tournament.name}.pdf`
      : 'feuille_presence.pdf';


    this.pdfService.generateTablePDF([gamers_table, this.sales_of_the_day_table], fname);

  }

  build_gamers_table(): PDF_table {

    let payment = (gamer: Gamer) => {
      if (!gamer.validated) return 'dispense';
      if (gamer.enabled) {
        return gamer.in_euro ? (gamer.price.toFixed(2) + ' €') : ((this.game.fees_doubled ? 2 : 1) + 'tampon(s)');
      } else {
        return 'Carte';
      }
    }

    if (!this.game || !this.game.gamers) return { title: '', headers: [], alignments: [], rows: [] };
    const title = 'recettes : ' + this.stamps_collected() + ' tampon(s) et ' + this.euros_collected() + ' €';
    const headers = ['Joueur1', 'Paiement1', 'Joueur2', 'Paiement2'];
    const alignments: HorizontalAlignment[] = ['left', 'right', 'left', 'right'];
    const rows: any[] = [];
    for (let i = 0; i < this.game.gamers.length; i += 2) {
      const gamer1 = this.game.gamers[i];
      const gamer2 = this.game.gamers[i + 1];
      rows.push([
        gamer1 ? gamer1.lastname + ' ' + gamer1.firstname : '',
        gamer1 ? payment(gamer1) : '',
        gamer2 ? gamer2.lastname + ' ' + gamer2.firstname : '',
        gamer2 ? payment(gamer2) : ''
      ]);
    }
    return { title, headers, alignments, rows };
  }


}